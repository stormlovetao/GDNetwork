# -*- coding: utf-8 -*-
"""
Created on 2015-1-8
Find Modules using WGCNA


@author: WangTao
@e-mail: wangtao_bic@hit.edu.cn

"""
from rpy2 import robjects
import os
import sys
import argparse
import string
import shutil

def ReadWGCNARawModules(modules_dir, modules_dic, modules_exp_dic):
	"""
	Read raw Modules and Modules' expressions generated by WGCNA
	"""
	files_in_modules_dir = os.listdir(modules_dir)
	modules_files = []
	for filename in files_in_modules_dir:
		if "_ModuleGenes.txt" in filename:
			modules_files.append(filename)
	for filename in modules_files:
		filename_split = filename.split("_ModuleGenes.txt")
		organelle_name = filename_split[0]
		file_path = modules_dir + filename
		tmp_dic = {}
		color2id_dic = {}
		fp = open(file_path, 'r')
		while True:
			line = fp.readline()
			if not line:
				break
			linesplit = line.split('\t')
			module_id = linesplit[0].strip()
			if module_id == '0':
				continue
			module_color = linesplit[1].strip()
			module_gene = linesplit[2].strip()
			module_name = organelle_name + '-' + module_id
			if not tmp_dic.has_key(module_name):
				tmp_dic[module_name] = [module_gene]
			else:
				tmp_dic[module_name].append(module_gene)
			
			if not color2id_dic.has_key(module_color):
				color2id_dic[module_color] = module_id
			
		if len(tmp_dic) == 0:
			continue
		if len(tmp_dic) > 0 and not modules_dic.has_key(organelle_name):
			modules_dic[organelle_name] = tmp_dic
		else:
			print "Error in function ReadWGCNARawModules! Exit!"
			sys.exit()
		fp.close()

		modules_exp_file_path = modules_dir + organelle_name + "_MEigengeneExpr.txt"
		fp = open(modules_exp_file_path, 'r')
		while True:
			line = fp.readline()
			if not line:
				break
			linesplit = line.split('\t')
			module_name = linesplit[0]
			module_color = module_name.split('ME')[1]
			if not color2id_dic.has_key(module_color):
				continue
			module_id = color2id_dic[module_color]
			module_name = organelle_name + '-' + module_id
			module_exp = [string.atof(exp) for exp in linesplit[1:]]
			modules_exp_dic[module_name] = module_exp
		fp.close()

def WriteWGCNAModules(final_modules_dir, modules_dic, modules_exp_dic):
	"""
	write modules and modules' exps in an easy data format
	"""
	for organelle_name in modules_dic:
		modules_file_path = final_modules_dir + organelle_name + '.MGenes'
		modules_exp_file_path = final_modules_dir + organelle_name + '.MExp'
		fpg = open(modules_file_path, 'w')
		fpe = open(modules_exp_file_path, 'w')
		for module_name in modules_dic[organelle_name]:
			MGeneslist = modules_dic[organelle_name][module_name]
			MGenesoutline = module_name + '\t' + '\t'.join(MGeneslist) + '\n'
			fpg.write(MGenesoutline)

			MExplist = modules_exp_dic[module_name]
			MExpStrlist = [str(x) for x in MExplist]
			MExpoutline = module_name + '\t' + '\t'.join(MExpStrlist) + '\n'
			fpe.write(MExpoutline)
		fpg.close()
		fpe.close()





if __name__ == '__main__':
	
	cmd_parser = argparse.ArgumentParser()
	cmd_parser.add_argument('--version', action='version', version='%(prog)s 1.0')
	cmd_parser.add_argument('-f', action = 'store', dest = "filename",
							help = "Essential,The name of source gene expression file")
	cmd_parser.add_argument('-s', action = 'store', dest = "minModuleSize",
							help = "optional, default = 5, The minimum module size")
	cmd_parser.add_argument('-sp', action = 'store', dest = "softPower",
							help = "optional, default = 6, The soft power")
	result = cmd_parser.parse_args()

	if result.filename == None:
		print "No gene expression source file exit, use argument '-h' for help!"
		sys.exit(1)
	else:
		filename = result.filename

	if result.minModuleSize == None:
		minModuleSize = 5
	else:
		minModuleSize = string.atof(result.minModuleSize)

	if result.softPower == None:
		softPower = 6
	else:
		softPower = string.atof(result.softPower)

	exp_files_dir = './' + filename + '/ExpBinning/' 
	exp_files_list = os.listdir(exp_files_dir)

	wgcna_dir = './' + filename + '/WGCNA/'
	if not os.path.exists(wgcna_dir):
		os.mkdir(wgcna_dir)
	else:
		shutil.rmtree(wgcna_dir)
		os.mkdir(wgcna_dir)

	powers_dir = wgcna_dir + 'Powers/'
	if not os.path.exists(powers_dir):
		os.mkdir(powers_dir)
	else:
		shutil.rmtree(powers_dir)
		os.mkdir(powers_dir)

	modules_dir = wgcna_dir + 'RawModules/'
	if not os.path.exists(modules_dir):
		os.mkdir(modules_dir)
	else:
		shutil.rmtree(modules_dir)
		os.mkdir(modules_dir)

	r = robjects.r
	rscript = """
		library(WGCNA);
		library(flashClust);
		options(stringsAsFactors = FALSE);
		enableWGCNAThreads();
	"""
	r(rscript)

	for expfilename in exp_files_list:
		expfilepath = exp_files_dir + expfilename
		exp = open(expfilepath, 'r')
		line_count = len(exp.readlines())
		if line_count < minModuleSize:
			continue
		exp.close()

		rscript = 'dataExpr = read.table("%s", row.names = 1)' % (expfilepath)
		r(rscript)

		r("dataExpr = as.data.frame(t(dataExpr))")

		expfilename_split = expfilename.split('_Expr')
		organelle_name = expfilename_split[0].strip()
		pick_powers_curve_path = powers_dir + organelle_name + "_powers.pdf"
		rscript = """
		powers = c(c(1:10), seq(from = 12, to = 30, by = 2))
		sft = pickSoftThreshold(dataExpr, powerVector = powers, networkType = "signed hybrid", verbose = 0)
		pdf(file = "%s", width = 12, height = 9)
		par(mfrow = c(1,2))
		cex1 = 0.9
		plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], xlab = "Soft Threshold (power)", 
			ylab = "Scale Free Topology Model Fit, signed R^2", type = "n", main = paste("Scale independence"))
		text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], labels = powers, cex = cex1, col = "red")
		abline(h = 0.9, col = "red")
		plot(sft$fitIndices[,1], sft$fitIndices[,5],xlab = "Soft Threshold (power)", ylab = "Mean Connectivity", type = "n",
			main = paste("Mean Connectivity"))
		text(sft$fitIndices[,1], sft$fitIndices[,5], labels = powers, cex = cex1, col = "red")
		""" % (pick_powers_curve_path)
		#r(rscript)

		#gene_clustering_path = organelle_powers_folderpath + '/' + organelle_name + "_clustering.pdf"
		rscript = """
		softPower = %d
		adjacency = adjacency(dataExpr, power = softPower, type = "signed hybrid")
		TOM = TOMsimilarity(adjacency)
		dissTOM = 1-TOM
		geneTree = flashClust(as.dist(dissTOM), method = "average")
		
		""" % (softPower) 
		#% (gene_clustering_path)
		#pdf(file = "%s", width = 12, height = 9)
		#plot(geneTree, xlab = "", sub= "", main = "Gene clustering on TOM-based dissimilarity", labels = FALSE, hang = 0.04)
		r(rscript)

		module_color_path = modules_dir + organelle_name + "_moduleColor.pdf"
		rscript = """
		minModuleSize = %d
		dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM, deepSplit = 4, pamStage = FALSE, minClusterSize = minModuleSize)
		table(dynamicMods)
		dynamicColors = labels2colors(dynamicMods)
		table(dynamicColors)
		pdf(file = "%s", width = 8, height = 6)
		plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut", dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05, 
			main = "Gene dendrogram and module colors" )
		""" % (minModuleSize, module_color_path)
		r(rscript)

		module_genes_path = modules_dir + organelle_name + "_ModuleGenes.txt"
		module_eigengenes_path = modules_dir + organelle_name + "_MEigengeneExpr.txt"
		rscript = """
		MEList = moduleEigengenes(dataExpr, colors = dynamicColors)
		MEs = MEList$eigengenes
		colorOrder = c("grey", standardColors(dim(table(dynamicMods))))
		moduleLabels = match(dynamicColors, colorOrder) - 1
		module_genes = cbind(moduleLabels, dynamicColors, names(dataExpr))
		write.table(module_genes, file = "%s", quote = FALSE, sep = "\t", col.name = FALSE, row.names = FALSE)
		write.table(t(MEs), file = "%s", quote = FALSE, sep = "\t", col.names = FALSE)
		""" % (module_genes_path, module_eigengenes_path)
		r(rscript)

	modules_dic = {}
	modules_exp_dic = {}
	ReadWGCNARawModules(modules_dir, modules_dic, modules_exp_dic)

	final_modules_dir = wgcna_dir + 'Modules/'
	if not os.path.exists(final_modules_dir):
		os.mkdir(final_modules_dir)
	WriteWGCNAModules(final_modules_dir, modules_dic, modules_exp_dic)